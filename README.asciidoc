:src-dir: app/src/main/groovy/edu/vanderbilt/mesolab/symcps
:gradle-version: 7.3.2

= Gremlin Console Application

An extension to the GroovyConsole for use with Gremlin / Tinkerpop scripts

[source.multi-language-sample,groovy]
----
├── gradle // <1>
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew // <2>
├── gradlew.bat // <2>
├── settings.gradle.kts // <3>
└── app
    ├── build.gradle.kts // <4>
    └── src
        ├── main
        │   └── groovy // <5>
        │       └── edu.vanderbilt.mesolab.symcps
        │           └── GremlinConsole.groovy
        └── test
            └── groovy // <6>
                └── demo
                    └── AppTest.groovy
----

<1> Generated folder for wrapper files
<2> Gradle wrapper start scripts
<3> Settings file to define build name and subprojects
<4> Build script of `app` project
<5> Default Groovy source folder
<6> Default Groovy test source folder


== Review the project files

The `settings.gradle(.kts)` file has two interesting lines:

[source,groovy]
----
include::{src-dir}/GremlinConsole.groovy[]]
----

== Run the application

Thanks to the `application` plugin, you can run the application directly from the command line.
The `run` task tells Gradle to execute the `main` method in the class assigned to the `mainClass` property.

[listing.terminal.sample-command]
----
$ ./gradlew run

> Task :app:run
Hello world!

BUILD SUCCESSFUL
2 actionable tasks: 2 executed
----

NOTE: The first time you run the wrapper script, `gradlew`, there may be a delay while that version of `gradle` is downloaded and stored locally in your `~/.gradle/wrapper/dists` folder.

== Bundle the application

The `application` plugin also bundles the application, with all its dependencies, for you.
The archive will also contain a script to start the application with a single command.

[listing.terminal.sample-command]
----
$ ./gradlew build

BUILD SUCCESSFUL in 0s
7 actionable tasks: 7 executed
----

If you run a full build as shown above, Gradle will have produced the archive in two formats for you:
`app/build/distributions/app.tar` and `app/build/distributions/app.zip`.

== Publish a Build Scan

The best way to learn more about what your build is doing behind the scenes, is to publish a link:https://scans.gradle.com[build scan].
To do so, just run Gradle with the `--scan` flag.

[listing.terminal.sample-command]
----
$ ./gradlew build --scan

BUILD SUCCESSFUL in 0s
7 actionable tasks: 7 executed

Publishing a build scan to scans.gradle.com requires accepting the Gradle Terms of Service defined at https://gradle.com/terms-of-service.
Do you accept these terms? [yes, no] yes

Gradle Terms of Service accepted.

Publishing build scan...
https://gradle.com/s/5u4w3gxeurtd2
----

Click the link and explore which tasks where executed, which dependencies where downloaded and many more details!

== Summary

That's it! You've now successfully configured and built a Groovy application project with Gradle.
You've learned how to:

* Initialize a project that produces a Groovy application
* Run the build and view the test report
* Execute a Groovy application using the `run` task from the `application` plugin
* Bundle the application in an archive

== Next steps

To learn more about how you can further customize Groovy application projects, check out the following user manual chapters:

 - link:{userManualPath}/building_java_projects.html[Building Java & JVM projects]
 - link:{userManualPath}/application_plugin.html[Java Application Plugin documentation]
